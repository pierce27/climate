{
  "author": {
    "name": "Jeff Baskin",
    "email": "jeff.l.baskin@gmail.com"
  },
  "name": "connect-pg",
  "description": "Connect storage using PostgreSQL.",
  "keywords": [
    "pg",
    "connect",
    "postgres",
    "postgresql",
    "express"
  ],
  "version": "1.1.5",
  "homepage": "https://github.com/jebas/connect-pg",
  "repository": {
    "type": "git",
    "url": "ssh://git@github.com/jebas/connect-pg.git"
  },
  "main": "index",
  "scripts": {
    "test": "jasmine-node spec"
  },
  "engines": {
    "node": ">= 0.4.5"
  },
  "dependencies": {
    "connect": ">= 1.5.0",
    "pg": ">= 0.5.0"
  },
  "devDependencies": {
    "jasmine-node": ">= 1.0.5"
  },
  "readme": "# Connect PostgreSQL\n\nConnect-pg is a middleware session storage for the connect framework using \nPostgreSQL.  Why?  Because sometimes you need a relational database \nhandling your data.  \n\n## Requirements\n\n* **Production**\n\t* *[connect](https://github.com/senchalabs/connect) 1.5.0 or later* The HTTP server framework used by Express.\n\t* *[pg](https://github.com/brianc/node-postgres) 0.50 or later* The node.js client for PostgreSQL.  \n\t* *[PostgreSQL](http://www.postgresql.org) 9.0 or later* The database.\n\t* *[pgtap](http://pgtap.org)* TAP style testing framework for PostgreSQL databases.  \n* **Development**\n\t* *[jasmine-node](https://github.com/mhevery/jasmine-node)* The BDD style testing framework for JavaScript.  \n\n##Feature List\n\n* Create or update session information.\n* Retreive information stored for the session.\n* Delete the information for a session.\n* Count the total number of active sessions.\n* Delete all session information.\n* Automatically delete session information that has expired.\n\n## Installation \n\n1. **Setup PostgreSQL to Use Passwords to Log In**\n\n\tRefer to PostgreSQL's manual for changing the pg_hba.conf file.  The \n\tdatabase needs to be setup so that database users can log into the \n\tsystem using a password.  \n\n2. **Install pgTap into the Database**\n\n\t[pgTap](http://pgtap.org) is a development tool that validates whether \n\tthe database is functioning properly or not.  The same tests can also \n\tbe used to determine what changes need to be made to the database \n\tin an installation or upgrade.  So it needs to be installed first.  The link \n\tto their website will provide instructions.  \n\n3. **Install the connect-pg library**\n\n\t*Standard Method:* npm install connect-pg\n\t\n\t*Manual Method:* [Download](https://github.com/jebas/connect-pg) the \n\tfiles to your server.  The only file your script needs access to is \n\tconnect-pg.js found in the lib directory.  \n\t\n4. **Install the Testing, Upgrading, and Installation Functions**\n\n\tAs the superuser for the database, install the functions that test, \n\tinstall, and upgrade the connect-pg database. As shown in the \n\tfollowing example:\n\t\n\t`psql -d {database name} -U postgres -f {path to file}/session_install.sql`\n\n5. **Run the Database Correction Function**\n\n\tAs the database's superuser, run the database correction function.  \n\tThis will install the tables and functions into a new database, or it will \n\tupdate an existing database to add the new features.  The following is \n\tan example of the command.  \n\n\t`psql -d {database name} -U postgres -c 'select correct_web()'`\n\t\n6. **Change the nodepg user's password**\n\n\tAs part of the database setup, the correct_web function will confirm \n\tor create a PostgreSQL user called nodepg.  For security reasons, this \n\tuser is only given enough rights to operate the connect-pg functions, \n\tand no more.  Since the default password for this user is 'password', \n\tyou will want to change the password for this user to something that \n\tis more secure.  Example as follow:\n\t\n\t`psql -d {database name} -U postgres -c 'alter user nodepg with password {something secret}'`\n\n## Usage\n\n1. The database installation goes through the process of creating the \nconnection user, and setting permissions.  To use connect-pg in your \nExpress of Connection application, you will need to create a function \nwhose callback will contain a pg client.  The following is an example:\n\n<pre><code>\n\tvar pg = require('pg');\n\n\tfunction pgConnect (callback) {\n\t\tpg.connect('tcp://nodepg:password@localhost/pgstore',\n\t\t\tfunction (err, client) {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.log(JSON.stringify(err));\n\t\t\t\t}\n\t\t\t\tif (client) {\n\t\t\t\t\tcallback(client);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t};\n</code></pre>\n\nObviously, you would change the pg connection string to something \nappropriate for your system.  \n\n2. Include the requirement for connect-pg.\n\n\t`var PGStore = require('connect-pg');`\n\n3. Setup the session software to use the connect-pg for storage.  \n\n\t* **In connect:**\n\t\n\t\t`connect.session({ store: new PGStore(pgConnect), \n\t\tsecret: 'keyboard cat'});`\n\t\t\n\t* **In Express:**\n\t\n\t\t`app.use(express.session({store: new PGStore(pgConnect), \n\t\tsecret: 'keyboard cat'}));`\n\n## Development \n\nConnect-pg is the first module in a series that is being developed for \nnode.js and Express.  Using the Model, View, Controller (MVC) analogy, \nPostgreSQL is used for the model, templates are used for the view, and \nExpress is used for the controller.  \n\nIf you wish to contribute, please follow these guidelines:\n\n* Only pgTap, installation/upgrade, and functions supporting them \nare placed in the root of the database.\n* Everything else should be placed into a given schema.  \n* Tests functions should start with 'test_{schema name}_' so they \ndon't conflict with other modules.\n* Nodepg should only be given the minimum permissions to make \nthe module run.\n* Use pgTap tests to create an installation/upgrade function.  Use \nconnect-pg's correct_web() as an example.\n* Though you don't have to use Jasmine for every module, some \nautomated testing method is preferred.  \n* Be careful of using pgTAP's startup, setup, teardown, and shutdown \nfunctions.  These run before and after the test function is run.  In \ndevelopment this is fine, but it may cause the installation to call on \nfeatures that have not been installed yet.  \n\n## LICENSE\n\nThis software is using the [MIT](./connect-pg/blob/master/LICENSE) to match \nthe connect license.",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/jebas/connect-pg/issues"
  },
  "_id": "connect-pg@1.1.5",
  "dist": {
    "shasum": "4746305794e8638fc246b223f7d0d13ef9ddbf37"
  },
  "_from": "connect-pg@",
  "_resolved": "https://registry.npmjs.org/connect-pg/-/connect-pg-1.1.5.tgz"
}
